generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                    String                      @id @default(uuid())
  email                 String?                     @unique
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime                    @default(now())
  name                  String                      @unique
  role                  Role?
  Account               Account[]
  creativeWorks         CreativeWork[]
  Session               Session[]
  profile               UserProfile?
  RatingForCreativeWork UserRatingForCreativeWork[]
  Stats                 UserStats?

  @@index([createdAt(sort: Desc)])
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([createdAt(sort: Desc)])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  createdAt    DateTime @default(now())
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
}

model UserProfile {
  id             String     @id @default(uuid())
  userId         String     @unique
  firstName      String
  lastName       String
  gender         UserGender @default(M)
  bio            String?
  work           String
  education      String
  profilePicture String?
  coverPhoto     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?
  Education      Education  @relation(fields: [education], references: [name], onDelete: Cascade)
  Gender         Gender     @relation(fields: [gender], references: [name], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Work           Work       @relation(fields: [work], references: [name], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
}

model Education {
  name        String        @id
  count       Int           @default(0)
  UserProfile UserProfile[]
}

model Gender {
  name        UserGender    @id
  count       Int           @default(0)
  UserProfile UserProfile[]
}

model Work {
  name        String        @id
  count       Int           @default(0)
  UserProfile UserProfile[]
}

model LanguageTag {
  id          String          @id @default(uuid())
  code        String
  name        String
  countryCode String
  region      String
  description String?
  type        LanguageTagType @default(IETF_BCP_47_STANDARD)
  BlogPost    BlogPost[]

  @@unique([code, countryCode])
}

model UserStats {
  id                        String @id @default(uuid())
  userId                    String @unique
  postsCount                Int    @default(0)
  blogPostsCount            Int    @default(0)
  discussionForumsCount     Int    @default(0)
  discussionForumPostsCount Int    @default(0)
  user                      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CreativeWork {
  id                    String                  @id @default(uuid())
  authorId              String
  status                CreativeWorkStatus      @default(PUBLIC)
  type                  CreativeWorkType
  createdAt             DateTime                @default(now())
  blogPost              BlogPost?
  author                User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  discussionForum       DiscussionForum?
  DiscussionForumPost   DiscussionForumPost?
  Post                  Post?
  RatingForCreativeWork RatingForCreativeWork[]
  tags                  Tag[]                   @relation("CreativeWorkToTag")

  @@index([createdAt(sort: Desc)])
}

model Tag {
  name          String         @id @unique
  Stats         TagStats?
  creativeWorks CreativeWork[] @relation("CreativeWorkToTag")
}

model TagStats {
  id                        String @id @default(uuid())
  tagName                   String @unique
  postsCount                Int    @default(0)
  blogPostsCount            Int    @default(0)
  discussionForumsCount     Int    @default(0)
  discussionForumPostsCount Int    @default(0)
  Tag                       Tag    @relation(fields: [tagName], references: [name], onDelete: Cascade)
}

model BlogPost {
  id                String          @id @default(uuid())
  creativeWorkId    String          @unique
  discussionForumId String          @unique
  slug              String          @unique
  title             String
  thumbnailUrl      String
  description       String
  content           String
  languageTagId     String
  updatedAt         DateTime?
  creativeWork      CreativeWork    @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade)
  discussionForum   DiscussionForum @relation(fields: [discussionForumId], references: [creativeWorkId], onDelete: Cascade)
  languageTag       LanguageTag     @relation(fields: [languageTagId], references: [id], onDelete: Cascade)
}

model DiscussionForum {
  id                  String                @id @default(uuid())
  creativeWorkId      String                @unique
  size                Int                   @default(0)
  updatedAt           DateTime?
  BlogPost            BlogPost?
  creativeWork        CreativeWork          @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade)
  DiscussionForumPost DiscussionForumPost[]
  Post                Post?
}

model DiscussionForumPost {
  id                                String               @id @default(uuid())
  content                           String
  replies_count                     Int                  @default(0)
  replyToId                         String?              @unique
  creativeWorkId                    String               @unique
  discussionForumId                 String
  updatedAt                         DateTime?
  creativeWork                      CreativeWork         @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade)
  discussionForum                   DiscussionForum      @relation(fields: [discussionForumId], references: [id], onDelete: Cascade)
  DiscussionForumPost               DiscussionForumPost? @relation("DiscussionForumPostToDiscussionForumPost", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  RepliesForThisDiscussionForumPost DiscussionForumPost? @relation("DiscussionForumPostToDiscussionForumPost")
}

model Post {
  id                String          @id @default(uuid())
  creativeWorkId    String          @unique
  discussionForumId String          @unique
  content           String
  updatedAt         DateTime?
  creativeWork      CreativeWork    @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade)
  discussionForum   DiscussionForum @relation(fields: [discussionForumId], references: [creativeWorkId], onDelete: Cascade)
}

model RatingForCreativeWork {
  id                        String                      @id @default(uuid())
  totalRating               Int                         @default(0)
  ratingsCount              Int                         @default(0)
  creativeWorkId            String
  updatedAt                 DateTime?
  creativeWork              CreativeWork                @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade)
  UserRatingForCreativeWork UserRatingForCreativeWork[]
}

model UserRatingForCreativeWork {
  id                    String                @id @default(uuid())
  creativeWorkRatingId  String
  userId                String
  RatingForCreativeWork RatingForCreativeWork @relation(fields: [creativeWorkRatingId], references: [id], onDelete: Cascade)
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserGender {
  M
  F
}

enum CreativeWorkType {
  POST
  BLOG_POST
  DISCUSSION_FORUM
  DISCUSSION_FORUM_POST
}

enum CreativeWorkStatus {
  PUBLIC
  PRIVATE
  DELETED
}

enum LanguageTagType {
  IETF_BCP_47_STANDARD
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

// DELETE FROM "User";
// DELETE FROM "Account";
// DELETE FROM "Session";
// DELETE FROM "UserProfile";
// DELETE FROM "Education";
// DELETE FROM "Gender";
// DELETE FROM "Work";
// DELETE FROM "LanguageTag";
// DELETE FROM "UserStats";
// DELETE FROM "VerificationToken";
// DELETE FROM "CreativeWork";
// DELETE FROM "Tag";
// DELETE FROM "TagStats";
// DELETE FROM "BlogPost";
// DELETE FROM "DiscussionForum";
// DELETE FROM "DiscussionForumPost";
// DELETE FROM "Post";
// DELETE FROM "RatingForCreativeWork";
// DELETE FROM "UserRatingForCreativeWork";
