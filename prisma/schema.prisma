generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                        String                      @id
  email                     String?                     @unique
  emailVerified             DateTime?
  image                     String?
  createdAt                 DateTime                    @default(now())
  name                      String                      @unique
  role                      Role?
  Account                   Account[]
  CreativeWork              CreativeWork[]
  Session                   Session[]
  UserProfile               UserProfile?
  UserRatingForCreativeWork UserRatingForCreativeWork[]
  UserStats                 UserStats?

  @@index([createdAt(sort: Desc)])
}

model Account {
  id                String   @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "accounts_user_id_fkey")

  @@unique([provider, providerAccountId])
  @@index([createdAt(sort: Desc)])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  user_id      String
  createdAt    DateTime @default(now())
  expires      DateTime
  User         User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "sessions_user_id_fkey")

  @@index([createdAt(sort: Desc)])
}

model UserProfile {
  id             String     @id
  userId         String     @unique
  firstName      String
  lastName       String
  gender         UserGender @default(M)
  bio            String?
  work           String
  education      String
  profilePicture String?
  coverPhoto     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime?
  Education      Education  @relation(fields: [education], references: [name], onDelete: Cascade)
  Gender         Gender     @relation(fields: [gender], references: [name], onDelete: Cascade)
  User           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Work           Work       @relation(fields: [work], references: [name], onDelete: Cascade)

  @@index([createdAt(sort: Desc)])
}

model Education {
  name        String        @id
  count       Int           @default(0)
  UserProfile UserProfile[]
}

model Gender {
  name        UserGender    @id
  count       Int           @default(0)
  UserProfile UserProfile[]
}

model Work {
  name        String        @id
  count       Int           @default(0)
  UserProfile UserProfile[]
}

model LanguageTag {
  id          String          @id
  code        String
  name        String
  countryCode String
  region      String
  description String?
  type        LanguageTagType @default(IETF_BCP_47_STANDARD)
  BlogPost    BlogPost[]

  @@unique([code, countryCode])
}

model UserStats {
  id                        String @id(map: "users_stats_pkey")
  userId                    String @unique(map: "users_stats_user_id_key")
  postsCount                Int    @default(0)
  blogPostsCount            Int    @default(0)
  discussionForumsCount     Int    @default(0)
  discussionForumPostsCount Int    @default(0)
  User                      User   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "users_stats_user_id_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "verification_tokens_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "verification_tokens_identifier_token_key")
}

model CreativeWork {
  id                    String                  @id(map: "creative_works_pkey")
  authorId              String
  status                CreativeWorkStatus      @default(PUBLIC)
  type                  CreativeWorkType
  createdAt             DateTime                @default(now())
  blogPost              BlogPost?
  user                  User                    @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "creative_works_author_id_fkey")
  discussionForum       DiscussionForum?
  discussionForumPost   DiscussionForumPost?
  post                  Post?
  ratingForCreativeWork RatingForCreativeWork[]
  tags                  Tag[]                   @relation("CreativeWorkToTag")

  @@index([createdAt(sort: Desc)], map: "creative_works_created_at_idx")
}

model Tag {
  name          String         @id(map: "tags_pkey") @unique(map: "tags_name_key")
  TagStats      TagStats?
  creativeWorks CreativeWork[] @relation("CreativeWorkToTag")
}

model TagStats {
  id                        String @id(map: "tags_stats_pkey")
  tagName                   String @unique(map: "tags_stats_tag_name_key")
  postsCount                Int    @default(0)
  blogPostsCount            Int    @default(0)
  discussionForumsCount     Int    @default(0)
  discussionForumPostsCount Int    @default(0)
  Tag                       Tag    @relation(fields: [tagName], references: [name], onDelete: Cascade, map: "tags_stats_tag_name_fkey")
}

model BlogPost {
  id                  String          @id(map: "blog_posts_pkey")
  creativeWorkId      String          @unique(map: "blog_posts_creative_work_id_key")
  discussion_forum_id String          @unique(map: "blog_posts_discussion_forum_id_key")
  slug                String          @unique(map: "blog_posts_slug_key")
  title               String
  thumbnailUrl        String
  description         String
  content             String
  languageTagId       String
  updatedAt           DateTime?
  CreativeWork        CreativeWork    @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade, map: "blog_posts_creative_work_id_fkey")
  DiscussionForum     DiscussionForum @relation(fields: [discussion_forum_id], references: [creativeWorkId], onDelete: Cascade, map: "blog_posts_discussion_forum_id_fkey")
  LanguageTag         LanguageTag     @relation(fields: [languageTagId], references: [id], onDelete: Cascade, map: "blog_posts_language_tag_id_fkey")
}

model DiscussionForum {
  id                  String                @id(map: "discussion_forums_pkey")
  creativeWorkId      String                @unique(map: "discussion_forums_creative_work_id_key")
  size                Int                   @default(0)
  updatedAt           DateTime?
  BlogPost            BlogPost?
  CreativeWork        CreativeWork          @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade, map: "discussion_forums_creative_work_id_fkey")
  DiscussionForumPost DiscussionForumPost[]
  Post                Post?
}

model DiscussionForumPost {
  id                        String               @id(map: "discussions_forums_posts_pkey")
  content                   String
  replies_count             Int                  @default(0)
  replyToId                 String?              @unique(map: "discussions_forums_posts_reply_to_discussion_forum_post_Id_key")
  creativeWorkId            String               @unique(map: "discussions_forums_posts_creative_work_id_key")
  discussionForumId         String
  updatedAt                 DateTime?
  CreativeWork              CreativeWork         @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade, map: "discussions_forums_posts_creative_work_id_fkey")
  DiscussionForum           DiscussionForum      @relation(fields: [discussionForumId], references: [id], onDelete: Cascade, map: "discussions_forums_posts_discussion_forum_id_fkey")
  DiscussionForumPost       DiscussionForumPost? @relation("DiscussionForumPostToDiscussionForumPost", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "discussions_forums_posts_reply_to_discussion_forum_post_Id_fkey")
  other_DiscussionForumPost DiscussionForumPost? @relation("DiscussionForumPostToDiscussionForumPost")
}

model Post {
  id                String          @id(map: "posts_pkey")
  creativeWorkId    String          @unique(map: "posts_creative_work_id_key")
  discussionForumId String          @unique(map: "posts_discussion_forum_id_key")
  content           String
  updatedAt         DateTime?
  CreativeWork      CreativeWork    @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade, map: "posts_creative_work_id_fkey")
  DiscussionForum   DiscussionForum @relation(fields: [discussionForumId], references: [creativeWorkId], onDelete: Cascade, map: "posts_discussion_forum_id_fkey")
}

model RatingForCreativeWork {
  id                        String                      @id(map: "ratings_for_creative_works_pkey")
  totalRating               Int                         @default(0)
  ratingsCount              Int                         @default(0)
  creativeWorkId            String
  updatedAt                 DateTime?
  CreativeWork              CreativeWork                @relation(fields: [creativeWorkId], references: [id], onDelete: Cascade, map: "ratings_for_creative_works_creative_work_id_fkey")
  UserRatingForCreativeWork UserRatingForCreativeWork[]
}

model UserRatingForCreativeWork {
  id                    String                @id(map: "users_ratings_for_creative_works_pkey")
  creativeWorkRatingId  String
  userId                String
  RatingForCreativeWork RatingForCreativeWork @relation(fields: [creativeWorkRatingId], references: [id], onDelete: Cascade, map: "users_ratings_for_creative_works_creative_work_rating_id_fkey")
  User                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "users_ratings_for_creative_works_user_id_fkey")
}

enum UserGender {
  M
  F
}

enum CreativeWorkType {
  POST
  BLOG_POST
  DISCUSSION_FORUM
  DISCUSSION_FORUM_POST
}

enum CreativeWorkStatus {
  PUBLIC
  PRIVATE
  DELETED
}

enum LanguageTagType {
  IETF_BCP_47_STANDARD
}

enum Role {
  USER
  AUTHOR
  ADMIN
}
